require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { Pool } = require('pg');
const jwt = require('jsonwebtoken');
const path = require('path');
const fs = require('fs');

const app = express();
const port = 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
    origin: 'http://localhost:3000',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    credentials: true
}));
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, '../public')));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
    user: 'postgres',
    host: 'localhost',
    database: 'cf_platform',
    password: 'Donthack23_',
    port: 5432,
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
pool.query('SELECT NOW()', (err, res) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
    } else {
        console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á—ë–Ω:', res.rows[0].now);
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!re.test(email)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
    }
}

function checkAdmin(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1] || 
                req.query.token || 
                req.cookies.token;
  
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key');
    req.user = decoded;
    next();
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞:', err.message);
    res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}

function checkAuth(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1] || 
                req.query.token || 
                req.cookies.token;
  
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key');
    req.user = decoded;
    next();
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞:', err.message);
    res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}


// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    
    try {
        validateEmail(email);
        const checkUser = await pool.query(
            'SELECT * FROM users WHERE email = $1',
            [email]
        );
        
        if (checkUser.rows.length > 0) {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        
        const newUser = await pool.query(
            'INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING *',
            [username, email, password]
        );
        
        res.json({ success: true, user: newUser.rows[0] });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í—Ö–æ–¥
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    
    try {
        validateEmail(username);
        const user = await pool.query(
            'SELECT id, username, email, is_admin FROM users WHERE email = $1 AND password = $2',
            [username, password]
        );
        
        if (user.rows.length === 0) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        const userData = user.rows[0];
        const token = jwt.sign(
            {
                id: userData.id,
                isAdmin: userData.is_admin
            },
            process.env.JWT_SECRET || 'your_secret_key',
            { expiresIn: '1h' }
        );
        
        res.json({
            success: true,
            token,
            user: {
                id: userData.id,
                username: userData.username,
                email: userData.email,
                isAdmin: userData.is_admin
            }
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
app.get('/api/tasks', checkAdmin, async (req, res) => {
    try {
        const tasks = await pool.query(`
            SELECT t.*, u.username as admin_name 
            FROM tasks t
            JOIN users u ON t.admin_id = u.id
            ORDER BY t.created_at DESC
        `);
        res.json(tasks.rows);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á' });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.post('/api/tasks', checkAdmin, async (req, res) => {
  try {
      const { title, content, language } = req.body;
      
      const result = await pool.query(
          `INSERT INTO tasks (title, content, language, admin_id)
           VALUES ($1, $2, $3, $4) RETURNING *`,
          [title, content, language, req.user.id]
      );

      res.status(201).json(result.rows[0]);
  } catch (err) {
      console.error('Error:', err);
      res.status(500).json({ 
          error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏',
          details: err.message 
      });
  }
});

app.get('/api/tasks/:id', async (req, res) => {
  try {
    const id = parseInt(req.params.id); // –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
    console.log('üõ†Ô∏è –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á–∏ —Å ID:', id, '(–¢–∏–ø:', typeof id + ')');

    const result = await pool.query('SELECT * FROM tasks WHERE id = $1', [id]);
    
    if (result.rows.length === 0) {
      console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞:', result.rows[0]);
    res.json(result.rows[0]);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
  }
});
// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.delete('/api/tasks/:id', checkAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const result = await pool.query(
            'DELETE FROM tasks WHERE id = $1 RETURNING *',
            [id]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        res.json({ success: true });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
app.get('/api/active-tasks', async (req, res) => {
  try {
      const { search, language } = req.query;
      let query = `SELECT id, title, content, language 
                   FROM tasks WHERE is_active = true`;
      
      const params = [];
      
      if (search) {
          query += ` AND (title ILIKE $${params.length + 1} OR content ILIKE $${params.length + 1})`;
          params.push(`%${search}%`);
      }
      
      if (language) {
          query += ` AND language = $${params.length + 1}`;
          params.push(language);
      }
      
      query += ' ORDER BY created_at DESC';
      
      const result = await pool.query(query, params);
      res.json(result.rows);
  } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è
app.post('/api/submissions', async (req, res) => {
  try {
      const { task_id, language, code, user_id } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const taskCheck = await pool.query(
          'SELECT id, content FROM tasks WHERE id = $1 AND is_active = true',
          [task_id]
      );
      
      if (taskCheck.rows.length === 0) {
          return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
      const solutionResult = await pool.query(
          `INSERT INTO solutions 
           (task_id, user_id, language, code, status) 
           VALUES ($1, $2, $3, $4, 'pending') 
           RETURNING *`,
          [task_id, user_id, language, code]
      );

      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ü–µ–Ω–∫—É –≤ DeepSeek
      setTimeout(async () => {
          try {
              const evaluation = await evaluateWithDeepSeek(
                  code, 
                  language, 
                  taskCheck.rows[0].content
              );
              
              await pool.query(
                  `UPDATE solutions SET 
                   status = $1, score = $2, feedback = $3, evaluated_at = NOW()
                   WHERE id = $4`,
                  [evaluation.status, evaluation.score, evaluation.feedback, solutionResult.rows[0].id]
              );
              
              // –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ—à–µ–Ω–Ω—ã–µ
              if (evaluation.score >= 70) { // –ü–æ—Ä–æ–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                  await pool.query(
                      `INSERT INTO user_solved_tasks (user_id, task_id, solution_id)
                       VALUES ($1, $2, $3)
                       ON CONFLICT (user_id, task_id) DO UPDATE
                       SET solution_id = $3, solved_at = NOW()`,
                      [user_id, task_id, solutionResult.rows[0].id]
                  );
              }
          } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ—à–µ–Ω–∏—è:', e);
          }
      }, 0);

      res.json({ 
          success: true,
          solution: solutionResult.rows[0]
      });

  } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
app.patch('/api/tasks/:id/visibility', checkAdmin, async (req, res) => {
  try {
      const { id } = req.params;
      const { is_active } = req.body;
      
      const result = await pool.query(
          'UPDATE tasks SET is_active = $1 WHERE id = $2 RETURNING *',
          [is_active, id]
      );
      
      if (result.rows.length === 0) {
          return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
      
      res.json({ success: true, task: result.rows[0] });
  } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user-solutions', checkAuth, async (req, res) => {
  try {
      const result = await pool.query(`
          SELECT s.*, t.title as task_title
          FROM solutions s
          JOIN tasks t ON s.task_id = t.id
          WHERE s.user_id = $1
          ORDER BY s.submitted_at DESC
      `, [req.user.id]);
      
      res.json(result.rows);
  } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–µ–Ω–∏–π:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å —Ñ–∏–¥–±–µ–∫–æ–º
app.get('/api/solutions/:id', checkAuth, async (req, res) => {
  try {
      const result = await pool.query(`
          SELECT s.*, t.title as task_title, t.content as task_content
          FROM solutions s
          JOIN tasks t ON s.task_id = t.id
          WHERE s.id = $1 AND s.user_id = $2
      `, [req.params.id, req.user.id]);
      
      if (result.rows.length === 0) {
          return res.status(404).json({ error: '–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
      }
      
      res.json(result.rows[0]);
  } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–µ–Ω–∏—è:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ—à–µ–Ω–∏–π
// async function evaluateWithDeepSeek(code, language, taskContent) {
//   try {
//       const response = await fetch('https://api.deepseek.com/v1/evaluate', {
//           method: 'POST',
//           headers: {
//               'Content-Type': 'application/json',
//               'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`
//           },
//           body: JSON.stringify({
//               code,
//               language,
//               task_description: taskContent
//           })
//       });
      
//       if (!response.ok) {
//           throw new Error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ—à–µ–Ω–∏—è');
//       }
      
//       return await response.json();
//   } catch (error) {
//       console.error('DeepSeek API error:', error);
//       return {
//           score: 0,
//           feedback: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
//           status: "error"
//       };
//   }
// }

async function evaluateWithDeepSeek(code, language, taskContent) {
  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API (1-3 —Å–µ–∫—É–Ω–¥—ã)
  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ" —Ñ–∏–¥–±–µ–∫–∞
  const randomScore = Math.floor(Math.random() * 30) + 50; // 50-80%
  const feedbacks = [
      "–ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.",
      "–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã.",
      "–ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.",
      `–†–µ—à–µ–Ω–∏–µ –Ω–∞ ${language} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—é, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å.`,
      "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö."
  ];
  
  return {
      score: randomScore,
      feedback: feedbacks[Math.floor(Math.random() * feedbacks.length)],
      status: randomScore > 70 ? "completed" : "partial"
  };
}


// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.get('/admin.html', (req, res) => {
    res.sendFile(path.join(__dirname, '../public/admin.html'));
});

app.get('/profile.html', (req, res) => {
    res.sendFile(path.join(__dirname, '../public/profile.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});

